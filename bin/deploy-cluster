#!/usr/bin/env bash

set -euo pipefail

if [ "$#" -lt 1 ]; then
  echo
  echo "usage: deploy clustername [ <vpc name> ]"
  echo "  ie. deploy lebkuchen development"
  echo "  the default vpc name is development"
  exit 255
fi

clustername=${1}
vpcname=${2-development}
AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION-ap-southeast-2}

function deploy() {

  component=${1}
  if [[ -z "$component" ]]; then
    echo "error: no component provided to deploy"
    return 1
  fi
  echo 
  echo "--- deploying $clustername $component ---"
  stackup kube-${component}-${clustername} up \
    -t ./${component}/template.yml \
    -p ./${component}/params/${clustername}.yml \
    -o ClusterName=${clustername}

}

function tag-resources() {

  echo
  echo "--- tagging subnets $vpcname for cluster $clustername ---"
  subnets=$(aws cloudformation list-stack-resources --stack-name kube-vpc-${vpcname} |jq -r '.StackResourceSummaries[]|select(.LogicalResourceId |test("KubeP."))|select(.ResourceType == "AWS::EC2::Subnet")|.PhysicalResourceId')
  if [[ -z "$subnets" ]]; then
    echo "error: no subnets found to tag"
  fi
  for subnet in $subnets
  do
    echo subnet $subnet
    aws ec2 create-tags --resources "${subnet}" --tags Key=kubernetes.io/cluster/${clustername},Value=shared
  done
  echo tagged subnets: $subnets

  echo
  echo "--- tagging vpc $vpcname for cluster $clustername ---"
  vpc=$(aws cloudformation list-stack-resources --stack-name kube-vpc-${vpcname} |jq -r '.StackResourceSummaries[]|select(.ResourceType == "AWS::EC2::VPC")|.PhysicalResourceId')
  if [[ -z "$vpc" ]]; then
    echo "error: no vpc found to tag"
  fi
  aws ec2 create-tags --resources "${vpc}" --tags Key=kubernetes.io/cluster/${clustername},Value=shared
  echo tagged vpc: $vpc

}

function auth-nodes() {

  echo
  echo "--- authorise nodes for cluster $clustername ---"
  noderole=$(aws cloudformation list-stack-resources --stack-name kube-controlplane-${clustername} |jq -r '.StackResourceSummaries[]|select(.LogicalResourceId == "NodeInstanceRole")|.Arn')
  export nodeRoleArnExportedKey="KubeCluster-NodeInstanceRoleArn-${clustername}"
  noderole=$(aws cloudformation list-exports |jq -r '.Exports[]|select(.Name == env.nodeRoleArnExportedKey)|.Value')
  if [[ ! "$noderole" ]]; then
    echo "error: couldn't find NodeInstanceRoleArn"
    return 1
  fi

  aws eks update-kubeconfig --name ${clustername}
  rc=$?
  if [[ ! $rc ]]; then
    echo "error: couldn't configure kubeconfig"
    return 1
  fi

  echo 
  echo updating kube-system/aws-auth configmap for cluster ${clustername} with node instance role ${noderole}
  cat <<EOF | kubectl apply -f -
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: aws-auth
  namespace: kube-system
data:
  mapRoles: |
    - rolearn: ${noderole}
      username: system:node:{{EC2PrivateDNSName}}
      groups:
        - system:bootstrappers
        - system:nodes
EOF

}

function label-nodes() {
  echo
  echo "--- labelling lebkuchen nodes ---"
  kubectl get node -o go-template --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'|while read NODE_NAME
  do
      echo label node $NODE_NAME as node
      kubectl label node ${NODE_NAME} node-role.kubernetes.io/node="" --overwrite=true
  done
}

# main

echo
echo "--- deploying vpc $vpcname ---"
stackup kube-vpc-${vpcname} up \
  -t ./vpc/template.yml \
  -o EnvironmentName=${vpcname}

echo
echo "--- deploying bastion $vpcname ---"
stackup kube-bastion-${vpcname} up \
  -t ./bastion/template.yml \
  -p ./bastion/params/${vpcname}.yml \
  -o VpcName=${vpcname}

tag-resources
deploy securitygroups
deploy controlplane
auth-nodes
deploy nodes
label-nodes
